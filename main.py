from config import *
from ReplyKeyboardMarkupButton import *
from aiogram import Bot, Dispatcher, types, F
import sqlite3
import asyncio

bot = Bot(token=TOKEN)
dp = Dispatcher()


connection = sqlite3.connect('user.db')
cursor = connection.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS Users (
    username TEXT NOT NULL,
    id INTEGER PRIMARY KEY,
    offer INTEGER NOT NULL,
    idea INTEGER NOT NULL,
    process TEXT NOT NULL)
    ''')

connection.commit()

connection2 = sqlite3.connect('accept_offer.db')

connection2.commit()


# Work with callback
@dp.callback_query(F.data.startswith("Accept_"))
async def accept(callback_query: types.CallbackQuery):
    try:
        data = callback_query.data.split("_")
        if len(data) < 3:
            await bot.send_message(callback_query.from_user.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö")
            return

        userid = data[1]
        messagetype = data[2]
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ `offer` —Ç–∞ `idea` –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
        cursor.execute("SELECT offer, idea FROM Users WHERE id = ?", (userid,))
        result = cursor.fetchone()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        if not result:
            await bot.send_message(callback_query.from_user.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        offer, idea = result
        # –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
        if messagetype == 1:
            if idea == 1:  # –Ø–∫—â–æ —ñ–¥–µ—è –Ω–æ–≤–∞
                await bot.send_message(userid, "–í–∞—à –∑–∞–ø–∏—Ç –ø—Ä–∏–Ω—è–ª–∏", reply_markup=user)
                await bot.send_message(callback_query.from_user.id, "–í–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")

                cursor.execute('UPDATE Users SET idea = ? WHERE id = ?', (0, userid))
                connection.commit()
            else:  # –Ø–∫—â–æ –∑–∞—è–≤–∫—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ
                await bot.send_message(callback_query.from_user.id, "–ó–∞—è–≤–∫—É —É–∂–µ –±—É–ª–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ", reply_markup=user)
        else:
            if offer == 1:  # –Ø–∫—â–æ —ñ–¥–µ—è –Ω–æ–≤–∞
                await bot.send_message(userid, "–í–∞—à—É –∑–∞—è–≤–∫—É –ø—ñ–¥—Ç—Ä–∏–º–∞–ª–∏", reply_markup=user)
                await bot.send_message(callback_query.from_user.id, "–í–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
                cursor.execute('UPDATE Users SET offer = ? WHERE id = ?', (0, userid))
                connection.commit()
            else:  # –Ø–∫—â–æ –∑–∞—è–≤–∫—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ
                await bot.send_message(callback_query.from_user.id, "–ó–∞—è–≤–∫—É —É–∂–µ –±—É–ª–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ", reply_markup=user)
        # –í–∞–∂–ª–∏–≤–æ: –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback_query
        await callback_query.answer()  # –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –∫–Ω–æ–ø—Ü—ñ –∑–Ω–∏–∫–Ω—É—Ç–∏ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è

    except Exception as e:
        # –õ–æ–≥ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        print(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        await bot.send_message(callback_query.from_user.id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É")


def message_test(message):
    message_to_reply = message.split(" ")
    if message_to_reply[0] == "–í–∞–º":
        # print(message_to_reply[0] == "–í–∞–º")
        return True
    else:
        return False


@dp.callback_query(F.data.startswith("Cancel_"))
async def cancel(callback_query: types.CallbackQuery):
    try:
        data = callback_query.data.split("_")
        if len(data) < 3:
            await bot.send_message(callback_query.from_user.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö")
            return

        userid = data[1]
        messagetype = data[2]

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ `offer` —Ç–∞ `idea` –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
        cursor.execute("SELECT offer, idea FROM Users WHERE id = ?", (userid,))
        result = cursor.fetchone()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        if not result:
            await bot.send_message(callback_query.from_user.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        offer, idea = result

        # –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
        if messagetype == 1:
            if idea == 1:  # –Ø–∫—â–æ —ñ–¥–µ—è –Ω–æ–≤–∞
                await bot.send_message(userid, "–í–∞—à –∑–∞–ø–∏—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω–æ", reply_markup=user)
                await bot.send_message(callback_query.from_user.id, "–í–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
                cursor.execute('UPDATE Users SET idea = ? WHERE id = ?', (0, userid))
                connection.commit()
            else:  # –Ø–∫—â–æ –∑–∞—è–≤–∫—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ
                await bot.send_message(callback_query.from_user.id, "–ó–∞—è–≤–∫—É —É–∂–µ –±—É–ª–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ", reply_markup=user)
        else:
            if offer == 1:  # –Ø–∫—â–æ —ñ–¥–µ—è –Ω–æ–≤–∞
                await bot.send_message(userid, "–í–∞—à—É –∑–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω–æ", reply_markup=user)

                await bot.send_message(callback_query.from_user.id, "–í–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
                cursor.execute('UPDATE Users SET offer = ? WHERE id = ?', (0, userid))
                connection.commit()
            else:  # –Ø–∫—â–æ –∑–∞—è–≤–∫—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ
                await bot.send_message(callback_query.from_user.id, "–ó–∞—è–≤–∫—É —É–∂–µ –±—É–ª–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ", reply_markup=user)

        # –í–∞–∂–ª–∏–≤–æ: –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback_query
        await callback_query.answer()  # –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –∫–Ω–æ–ø—Ü—ñ –∑–Ω–∏–∫–Ω—É—Ç–∏ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    except Exception as e:
        # –õ–æ–≥ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        print(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        await bot.send_message(callback_query.from_user.id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É")


# Bot Start Message and add Markup
@dp.message()
async def start_command(message: types.Message) -> None:
    userid = message.from_user.id
    if message.text == '/start':
        if userid in admins:
            await bot.send_message(userid, welcomMessage, )
            try:
                cursor.execute('INSERT INTO Users (username, id, offer, idea, process) VALUES (?, ?, ?, ?, ?)',
                               (message.from_user.username, message.from_user.id, 0, 0, 0,))
                connection.commit()
            except:
                # print("Admin Already Exists")
                pass
        else:
            try:
                cursor.execute('INSERT INTO Users (username, id, offer, idea, process) VALUES (?, ?, ?, ?, ?)',
                               (message.from_user.username, message.from_user.id, 0, 0, 0,))
                connection.commit()
            except:
                # print("User Already Exists")
                pass
            await bot.send_message(userid, welcomMessage, reply_markup=user)
    elif message.reply_to_message is not None and message.from_user.id not in admins and message_test(
            message.reply_to_message.text) is False:
        await give_messsage(message, False)
    elif message.reply_to_message and message.from_user.id in admins:
        await give_messsage(message, True)
    elif message.reply_to_message and message.from_user.id not in admins and message_test(
            message.reply_to_message.text):
        await give_messsage(message, False)
    else:
        await message_handler(message)


async def send_message_to_admin(userid, usertag, messagetype, message):  # 1 = idea 2=offer
    if messagetype == 1:
        for i in admins:
            if i != userid:
                await bot.send_message(i, f"–ù–∞–¥—ñ–π—à–ª–æ –Ω–æ–≤–µ –ü–∏—Ç–∞–Ω–Ω—è\n\n{message} \n\n–í—ñ–¥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{usertag}",
                                       reply_markup=addbutton(userid, usertag, messagetype))
    elif messagetype == 2:
        for i in admins:
            if i != userid:
                await bot.send_message(i, f"–ù–∞–¥—ñ–π—à–ª–∞ –Ω–æ–≤–∞ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è\n\n{message}\n\n–í—ñ–¥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{usertag}",
                                       reply_markup=addbutton(userid, usertag, messagetype))


@dp.message()
async def message_handler(message: types.Message) -> None:
    userid = message.from_user.id
    if message.text == 'üí≠ ’Ä’°÷Ä÷Å ’∏÷Ç’≤’≤’•’¨' and userid not in admins:
        await message.reply("‘≥÷Ä’•÷Ñ ’±’•÷Ä ’∞’°÷Ä÷Å’® ÷á ’¥’•’∂÷Ñ ’∞’•’ø’°’§’°÷Ä’± ’Ø’°’∫ ’Ø’∞’°’Ω’ø’°’ø’•’∂÷Ñ ’±’•’¶ ’∞’•’ø ’∞’∂’°÷Ä’°’æ’∏÷Ä’´’∂’Ω ’Ω’•’≤’¥ ’™’°’¥’Ø’•’ø’∏÷Ç’¥÷â")
    elif message.text == '‚úâÔ∏è ‘±’º’°’ª’°÷Ä’Ø' and userid not in admins:
        await message.reply(
            "’Ü’•÷Ä’Ø’°’µ’°÷Å÷Ä’•÷Ñ ’±’•÷Ä ’°’º’°’ª’°÷Ä’Ø’® ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨’∏’æ ’∞’•’ø÷á’µ’°’¨ ’Ø’•’ø’•÷Ä’®‚Ä§ \n\n‚Ä¢ ’°’º’°’ª’°÷Ä’Ø’´ ’∞’°’Ø’´÷Ä’≥ ’∂’Ø’°÷Ä’°’£’´÷Ä \n\n‚Ä¢ ’§’´’ø’°÷Ä’Ø’æ’∏’≤ ’™’°’¥’Ø’•’ø \n‚Ä¢ ’°’∂’∞÷Ä’°’™’•’∑’ø ’º’•’Ω’∏÷Ç÷Ä’Ω’∂’•÷Ä \n‚Ä¢ ’∂’∫’°’ø’°’Ø")
    elif userid in admins:
        await message.reply("’§’∏÷Ç÷Ñ ’°’§’¥’´’∂’´’Ω’ø÷Ä’°’ø’∏÷Ä ’•÷Ñ, ’π’•÷Ñ ’Ø’°÷Ä’∏’≤ ’∞’°÷Ä÷Å’∏÷Ç’¥’∂’•÷Ä ’∏÷Ç’≤’°÷Ä’Ø’•’¨")


async def setup_data(message, message_type):
    userid = message.from_user.id
    usertag = message.from_user.username
    messagetosend = message.text

    try:
        cursor.execute("SELECT offer,idea FROM Users WHERE id = ?", (userid,))
        result = cursor.fetchone()
        offer, idea = result
        if message_type == 1:
            if idea != 1:
                cursor.execute('UPDATE Users SET idea = ? WHERE username = ?', (1, usertag))
                connection.commit()

                await bot.send_message(message.from_user.id,
                                       f"’Å’•÷Ä ’∂’°’¥’°’Ø’® \n\n{message.text} \n\n’∏÷Ç’≤’°÷Ä’Ø’æ’°’Æ ’ß, ’¥’•’∂÷Ñ ’∑’∏÷Ç’ø’∏’æ ’Ø’∫’°’ø’°’Ω’≠’°’∂’•’∂÷Ñ ’±’•’¶:",
                                       reply_markup=user)
                await send_message_to_admin(userid, usertag, message_type, messagetosend)
            else:
                await bot.send_message(message.from_user.id, "–í–∏ —É–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à –∑–∞–ø–∏—Ç –∑–∞—á–∏–∫–∞–π—Ç–µ", reply_markup=user)
        else:
            if offer != 1:
                cursor.execute('UPDATE Users SET offer = ? WHERE username = ?', (1, usertag))
                connection.commit()
                await bot.send_message(message.from_user.id,
                                       f"’Å’•÷Ä ’∂’°’¥’°’Ø’® \n\n{message.text} \n\n’∏÷Ç’≤’°÷Ä’Ø’æ’°’Æ ’ß, ’¥’•’∂÷Ñ ’∑’∏÷Ç’ø’∏’æ ’Ø’∫’°’ø’°’Ω’≠’°’∂’•’∂÷Ñ ’±’•’¶:",
                                       reply_markup=user)
                await send_message_to_admin(userid, usertag, message_type, messagetosend)
            else:
                await bot.send_message(message.from_user.id, "–í–∏ —É–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é", reply_markup=user)
    except Exception as e:
        print(f"Error: {e}")
        pass
    pass


@dp.message()
async def give_messsage(message: types.Message, admin_message=False) -> None:
    if not admin_message:
        message_to_reply = message.reply_to_message
        firs_word = message_to_reply.text.split(' ')
        firs_word = firs_word[0]
        if firs_word == "‘≥÷Ä’•÷Ñ":
            await setup_data(message, 1)
        elif firs_word == "’Ü’•÷Ä’Ø’°’µ’°÷Å÷Ä’•÷Ñ":
            await setup_data(message, 2)
        elif firs_word == "–í–∞–º":
            cursor.execute("SELECT process,id FROM Users WHERE process = ?", (message.from_user.id,))
            process, id = cursor.fetchone()
            if int(process) == message.from_user.id:
                await bot.send_message(id,
                                       f"–í–∞–º –Ω–∞–¥—ñ–π—à–ª–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å \n\n{message.text}"
                                       )
                await bot.send_message(message.from_user.id,
                                       "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ë—É–ª–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞ –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
                                       reply_markup=user)
            elif int(process) != message.from_user.id:
                await bot.send_message(message.from_user.id,
                                       "–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ –∑–∞–∫—Ä–∏—Ç–æ",
                                       reply_markup=user)
        else:
            await bot.send_message(message.from_user.id,
                                   "‘µ’©’• ‚Äã‚Äã’§’° ’°’º’°’ª’°÷Ä’Ø/’£’°’≤’°÷É’°÷Ä ’ß÷Ä, ’∫’°’ø’≥’•’∂’•÷Ñ ’°’µ’∂ ÷á ’Ø’ø’ø’°÷Å÷Ä’•÷Ñ ’Ω’ø’∏÷Ä÷á ’£’ø’∂’æ’∏’≤ ’Ø’∏’≥’°’Ø’∂’•÷Ä’´’∂’ù ’∏÷Ç’≤’°÷Ä’Ø’•’¨’∏÷Ç÷Å ’°’º’°’ª",
                                   reply_markup=user)
    else:
        message_to_reply = message.reply_to_message

        first_line = message_to_reply.text
        first_line = first_line.split('\n')
        first_line = first_line[0]

        lastWord = message_to_reply.text.split(' ')
        lastWord = lastWord[-1]

        if lastWord[0] == "@":
            lastWord = lastWord.split("@")[1]

        cursor.execute("SELECT id,offer,idea,process FROM Users WHERE username = ?", (lastWord,))
        id, offer, idea, process = cursor.fetchone()
        try:
            if process is not None and process is not message.from_user.id:
                if first_line == "–ù–∞–¥—ñ–π—à–ª–∞ –Ω–æ–≤–∞ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è" and process != 0:
                    if offer != 1:
                        await bot.send_message(message.from_user.id, "–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –±—É–ª–æ —É–∂–µ —Ä–æ–∑–≥—è–ª–µ–Ω–µ–Ω–Ω–æ")
                    elif offer != 0:
                        cursor.execute('UPDATE Users SET process = ? WHERE id = ?', (id, message.from_user.id))
                        connection.commit()

                        await bot.send_message(message.from_user.id,
                                               f"–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @{lastWord}")
                        try:
                            await bot.send_message(id, f"–í–∞–º –Ω–∞–¥—ñ–π—à–ª–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è \n\n{message.text}")
                        except Exception as e:
                            print(f"Error {e}")
                elif first_line == "–ù–∞–¥—ñ–π—à–ª–æ –Ω–æ–≤–µ –ü–∏—Ç–∞–Ω–Ω—è" and process != 0:
                    if idea != 1:
                        await bot.send_message(message.from_user.id, "–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –±—É–ª–æ —É–∂–µ —Ä–æ–∑–≥—è–ª–µ–Ω–µ–Ω–Ω–æ")
                    elif idea != 0:
                        cursor.execute('UPDATE Users SET process = ? WHERE id = ?', (id, message.from_user.id))
                        await bot.send_message(message.from_user.id,
                                               f"–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @{lastWord}")
                        try:
                            await bot.send_message(id, f"–í–∞–º –Ω–∞–¥—ñ–π—à–ª–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è \n\n{message.text}")
                        except Exception as e:
                            print(f"Error {e}")
                else:
                    print(first_line)
            elif offer != 0:
                await bot.send_message(message.from_user.id, "–¶–µ—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é —É–∂–µ –∑–∞–Ω—è—Ç—ñ ")
            elif idea != 0:
                await bot.send_message(message.from_user.id, "–¶–∏–º –ü–∏—Ç–∞–Ω–Ω—è–º —É–∂–µ –∑–∞–Ω—è—Ç—ñ ")
        except Exception as e:
            print(f"Error: {e}")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
